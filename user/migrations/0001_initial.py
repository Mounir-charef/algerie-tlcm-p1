# Generated by Django 4.1.5 on 2023-02-08 23:19

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Cmp",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Dot",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file_name",
                    models.FileField(
                        upload_to="static/files_admin",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["xlsx", "xls"]
                            )
                        ],
                    ),
                ),
                (
                    "upload_date",
                    models.DateField(
                        default=datetime.datetime(2023, 2, 9, 0, 19, 48, 742742)
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InformationDot",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField(default=datetime.date(2023, 1, 26))),
                ("total_raccordement_client", models.IntegerField(default=0)),
                ("auto", models.IntegerField(default=0)),
                ("binome", models.IntegerField(default=0)),
                ("dhdb", models.IntegerField(default=0)),
                ("ftth", models.IntegerField(default=0)),
                ("la_ls", models.IntegerField(default=0)),
                ("sans_specialite", models.IntegerField(default=0)),
                ("total", models.IntegerField(default=0)),
                ("q_o_s", models.FloatField(default=0)),
                ("norme", models.FloatField(default=0)),
                ("objectif", models.FloatField(default=0)),
                (
                    "dot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="user.dot"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Information",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField(default=datetime.date(2023, 1, 26))),
                ("total_raccordement_client", models.IntegerField(default=0)),
                ("auto", models.IntegerField(default=0)),
                ("binome", models.IntegerField(default=0)),
                ("dhdb", models.IntegerField(default=0)),
                ("ftth", models.IntegerField(default=0)),
                ("la_ls", models.IntegerField(default=0)),
                ("sans_specialite", models.IntegerField(default=0)),
                ("total", models.IntegerField(default=0)),
                ("q_o_s", models.FloatField(default=0)),
                ("norme", models.FloatField(default=0)),
                ("objectif", models.FloatField(default=0)),
                (
                    "cmp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="user.cmp"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="cmp",
            name="dot",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="user.dot"
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "dot",
                    models.ForeignKey(
                        default=user.models.base_dot,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user.dot",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
